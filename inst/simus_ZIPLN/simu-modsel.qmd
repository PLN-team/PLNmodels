---
title: "Simulation assessing Model Selection criteria"
authors: B. Batardi√®re, J. Chiquet, M. Mariadassou
format: 
  html:
    self-contained: true
execute: 
  cache: true
  warning: false
---

## Useful libraries & functions

```{r useful-libraries}
library(tidyverse)
library(PLNmodels)
library(MASS)
library(gt)
set.seed(1)
```

## Simulations settings

We consider ZIPLN models with $p=40$ variables and a varying number of covariates in the PLN component:

- `groups_0`: an intercept for each covariates ($p$ parameters), 
- `groups_1`: a categorical covariates with 2 modalities ($2p$ parameters)
- `groups_2`: a categorical covariates with 3 modalities ($3p$ parameters)

We fix the  corresponding regression coefficients $B_0, B_1, B_2$ accordingly. We also consider two sets of parameters for the ZI component: either a unique probability $\pi$ for each variable (1 parameter in the ZI component), or some variable-dependent probabilities $\pi_j$ randomly and uniformly picked in $[0.1,0.9]$ ($p$ parameter in the ZI component).

The covariance matrix $\Sigma$ is fixed to a Toeplitz/AR structure, such that $\Sigma_{ij} = \rho^{|i-j|}$ with $\rho=0.75$.

Under these settings, we have 6 different ZIPLN model (3 choices for covariates in the PLN component and 2 choice for the ZI component). 

We vary the sample size $n \in \{60, 120, 240\}$.

```{r simu-parameters}
p <- 40
seq_n <- c(60, 120, 240)
groups_0 <- 
  list(
    rep(1, 60),
    rep(1, 120),
    rep(1, 240)
  )
groups_1 <- 
  list(
    factor(rep(1:2, each = 30)),
    factor(rep(1:2, each = 60)),
    factor(rep(1:2, each = 120))
  )
groups_2 <- 
  list(
    factor(rep(1:3, each = 20)),
    factor(rep(1:3, each = 40)),
    factor(rep(1:3, each = 80))
  )

B_0 <- matrix(4, 1, p)
B_1 <- matrix(0, 2, p) ; B_1[1, ] <- 4 ; B_1[2, ] <- 6
B_2 <- matrix(0, 3, p) ; B_2[1, ] <- 4 ; B_2[2, ] <- 6 ; B_2[3, ] <- 8

Pi_0 <- rep(0.5, p)
Pi_1 <- runif(p, 0.1, 0.9)

Sigma <- toeplitz(0.75^(0:(p - 1)))
```

We introduce a simple function to generate data under a ZIPLN distribution: 

```{r rZIPLN}
rZIPLN <- function(X, B, Sigma, Pi) {
  n <- nrow(X)
  p <- ncol(Sigma)
  Z <- X %*% B + mvrnorm(n, rep(0,p), as.matrix(Sigma))
  Y <- matrix(rpois(n * p, as.vector(exp(Z))), n, p)
  zero <- t(replicate(n, rbinom(n = length(Pi), size = 1, prob = Pi)))
  res <- Y
  attr(res, "PLN") <- Y
  res[zero == 1] <- 0
  res
}
```

## Evaluating model selection of various information criteria 

We evaluate the capability of BIC, AIC and ICL to select the correct model with the following piece of code : all possible $6$ models are fitted when data is generated under the true model (being one of them).

First we define the function to perform a single simulation for a varying sample size:

```{r simu_func}
one_simu <- function(
    simu_number, 
    true_model = c("model_0_0", "model_1_0", "model_2_0", "model_0_1", "model_1_1", "model_2_1")) {
  cat("+")
  true_model <- match.arg(true_model)
  try(
  do.call(rbind, mapply(
    function(
    n, group_0, group_1, group_2) {
      Y <- 
        switch(true_model,
               "model_0_0" = rZIPLN(model.matrix(~ 0 + group_0), B_0, Sigma, Pi_0),
               "model_1_0" = rZIPLN(model.matrix(~ 0 + group_1), B_1, Sigma, Pi_0),
               "model_2_0" = rZIPLN(model.matrix(~ 0 + group_2), B_2, Sigma, Pi_0),
               "model_0_1" = rZIPLN(model.matrix(~ 0 + group_0), B_0, Sigma, Pi_1),
               "model_1_1" = rZIPLN(model.matrix(~ 0 + group_1), B_1, Sigma, Pi_1),
               "model_2_1" = rZIPLN(model.matrix(~ 0 + group_2), B_2, Sigma, Pi_1)
        )
      data_ <- suppressWarnings(
        prepare_data(counts = Y, 
                     covariates = cbind(factor(group_0), factor(group_1), factor(group_2))) 
      )
      model_0_0 <- ZIPLN(Y ~ 0 + group_0, zi = "single", data = data_, control = ZIPLN_param(trace = 0))
      model_1_0 <- ZIPLN(Y ~ 0 + group_1, zi = "single", data = data_, control = ZIPLN_param(trace = 0))
      model_2_0 <- ZIPLN(Y ~ 0 + group_2, zi = "single", data = data_, control = ZIPLN_param(trace = 0))
      model_0_1 <- ZIPLN(Y ~ 0 + group_0, zi = "col", data = data_, control = ZIPLN_param(trace = 0))
      model_1_1 <- ZIPLN(Y ~ 0 + group_1, zi = "col", data = data_, control = ZIPLN_param(trace = 0))
      model_2_1 <- ZIPLN(Y ~ 0 + group_2, zi = "col", data = data_, control = ZIPLN_param(trace = 0))
      
      res <- data.frame(
        simu       = simu_number,
        n          = n,
        true_model = true_model,
        AIC   = c(model_0_0$AIC, model_1_0$AIC, model_2_0$AIC, model_0_1$AIC, model_1_1$AIC, model_2_1$AIC), 
        BIC   = c(model_0_0$BIC, model_1_0$BIC, model_2_0$BIC, model_0_1$BIC, model_1_1$BIC, model_2_1$BIC), 
        ICL   = c(model_0_0$ICL, model_1_0$ICL, model_2_0$ICL, model_0_1$ICL, model_1_1$ICL, model_2_1$ICL), 
        model = c("model_0_0", "model_1_0", "model_2_0", "model_0_1", "model_1_1", "model_2_1")
      )
      res
    }, seq_n, groups_0, groups_1, groups_2, SIMPLIFY = FALSE
  )), silent = TRUE)
}
```

Second  we launch the simulations by cycling over all possible true models:

```{r simu}
nsim <- 50
out_model_0_0 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_0_0"))
out_model_1_0 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_1_0"))
out_model_2_0 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_2_0"))
out_model_0_1 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_0_1"))
out_model_1_1 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_1_1"))
out_model_2_1 <- do.call(rbind, lapply(1:nsim, one_simu, true_model = "model_2_1"))
out <- rbind(out_model_0_0, out_model_1_0, out_model_2_0,
             out_model_0_1, out_model_1_1, out_model_2_1)
```

## Results

We measure the performances by estimating the probability of choising the correct model for each criterion, and for all different models as the true reference one.

```{r results}
results <- 
  out %>% group_by(true_model, simu, n) %>% 
  summarize(ICL_choice  = model[which.max(ICL)],
            BIC_choice  = model[which.max(BIC)],
            AIC_choice  = model[which.max(AIC)]) %>% ungroup() %>% 
  mutate(ICL = ICL_choice == true_model, 
         BIC = BIC_choice == true_model, 
         AIC = AIC_choice == true_model)
results %>% group_by(true_model, n) %>% 
  summarize(ICL_correct = mean(ICL),
            BIC_correct = mean(BIC),
            AIC_correct = mean(AIC)) %>% gt()
```

