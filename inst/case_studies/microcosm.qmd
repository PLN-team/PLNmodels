---
title: "Microcosm data analysis with ZIPLN"
format: 
  html:
    embed-resources: true
execute: 
  warning: false
  cache: true
---

## Useful libraries and data

```{r setup, cache=FALSE, include=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)  # data manipulation
library(PLNmodels)  # PLNmodels
library(ggtext)
library(ggh4x)
library(patchwork)
library(gt)
library(viridis)
library(lemon)
```

```{r data, cache=FALSE}
data(microcosm)
```

## Fit various PLN model 

Assess groups effects in PLN models.

```{r microcosm-PLN, echo = TRUE, message=FALSE, results='hide'}
PLN           <- PLN(Abundance ~ 1             + offset(log(Offset)), data = microcosm)
PLN_site      <- PLN(Abundance ~ 0 + site      + offset(log(Offset)), data = microcosm)
PLN_time      <- PLN(Abundance ~ 0 + time      + offset(log(Offset)), data = microcosm)
PLN_site_time <- PLN(Abundance ~ 0 + site_time + offset(log(Offset)), data = microcosm)
```

## Fit various ZI-PLN models

#### Playing with the ZI component

Try various way of modeling probability of being zero:

```{r microcosm-ZI, echo = TRUE, message=FALSE, results='hide'}
ZI            <- ZIPLN(Abundance ~ 1 + offset(log(Offset)) | 1       , data = microcosm)
ZI_site       <- ZIPLN(Abundance ~ 1 + offset(log(Offset)) | 0 + site, data = microcosm)
ZI_time       <- ZIPLN(Abundance ~ 1 + offset(log(Offset)) | 0 + time, data = microcosm)
ZI_site_time  <- ZIPLN(Abundance ~ 1 + offset(log(Offset)) | 0 + site_time,
                       data = microcosm)
```

#### Include covariates both in PLN and ZI components

```{r microcosm-ZIPLN, echo = TRUE, message=FALSE, results='hide'}
ZI_site_PLN_site <- ZIPLN(Abundance ~ 0 + site      + offset(log(Offset)) | 0 + site,
                          data = microcosm)
ZI_time_PLN_time <- ZIPLN(Abundance ~ 0 + time      + offset(log(Offset)) | 0 + time,
                          data = microcosm)
ZI_PLN_site_time <- ZIPLN(Abundance ~ 0 + site_time + offset(log(Offset)) | 0 + site_time,
                          data = microcosm)
```

Other possible combinations:

```{r microcosm-ZIPLN-more, echo = TRUE, message=FALSE, results='hide'}
ZI_site_PLN_site_time <- ZIPLN(Abundance ~ 0 + site_time + offset(log(Offset)) | 0 + site,
                               data = microcosm)
ZI_time_PLN_site_time <- ZIPLN(Abundance ~ 0 + site_time + offset(log(Offset)) | 0 + time,
                               data = microcosm)
ZI_site_time_PLN_site <- ZIPLN(Abundance ~ 0 + site + offset(log(Offset)) | 0 + site_time,
                               data = microcosm)
ZI_site_time_PLN_time <- ZIPLN(Abundance ~ 0 + time + offset(log(Offset)) | 0 + site_time,
                               data = microcosm)
```

## Locate the best model

```{r microcosm-ZIPLN-criteria, echo = FALSE}
rbind(
  PLN$criteria, PLN_time$criteria, PLN_site$criteria, PLN_site_time$criteria,
  ZI$criteria, ZI_time$criteria, ZI_site$criteria, ZI_site_time$criteria,
  ZI_time_PLN_time$criteria, ZI_site_PLN_site$criteria,
  ZI_time_PLN_site_time$criteria, ZI_site_PLN_site_time$criteria,
  ZI_site_time_PLN_time$criteria, ZI_site_time_PLN_site$criteria,
  ZI_PLN_site_time$criteria
) %>%
  as.data.frame(row.names = 
    c("PLN", "PLN time", "PLN site", "PLN site * time",
      "ZI", "ZI time", "ZI site", "ZI site * time",
      "ZI time PLN time", "ZI site PLN site",
      "ZI time and PLN site * time", "ZI site and PLN site * time",
      "ZI site * time and PLN time", "ZI site * time and PLN site",
      "ZI and PLN site * time")) %>%
  gt::gt(rownames_to_stub = TRUE) %>% 
  gt::tab_stubhead(label = "model") %>% 
  gt::tab_header(
    title = md("**Model selection criteria**"),
    subtitle = md("The *top two* largest are presented")
    ) %>% 
  gt::tab_row_group(
    label = "ZIPLN",
    rows = 9:15
  ) %>% 
  gt::tab_row_group(
    label = "ZI",
    rows = 5:8
  )  %>% 
  gt::tab_row_group(
    label = "PLN",
    rows = 1:4
  ) %>% 
  gt::tab_options(table.font.size = 18) %>% 
      tab_style(
        style = list(
          cell_fill(color = '#9a2515'),
          cell_text(color = 'white')
          ),
          locations = cells_body(
          columns = c("BIC"), 
          rows = c(1, 7, 10)
    )) %>% 
      tab_style(
        style = list(
          cell_fill(color = '#9a2515'),
          cell_text(color = 'white')
          ),
          locations = cells_body(
          columns = c("AIC"), 
          rows = c(4, 8, 14)
    )) %>% 
      tab_style(
        style = list(
          cell_fill(color = '#9a2515'),
          cell_text(color = 'white')
          ),
          locations = cells_body(
          columns = c("ICL"), 
          rows = c(2, 8, 15)
    ))
```

$\rightsquigarrow$ Ok, for illustrative purpose, let us keep model with `site_time` in both ZI an PLN components.

## Figures

```{r palette}
#| code-fold: true
site_time_palette <- c(
  "_**<span style = 'color:#2171b5;'>Oral</span>**_"  = "transparent",
  "O -1W" = "#bdd7e7", 
  "O 1M" = "#6baed6", 
  "O 3M" = "#2171b5", 
  "O 7M" = "#053061",
  "_**<span style = 'color:#cb181d;'>Nasal</span>**_"  = "transparent",
  "N -1W" = "#fcae91", 
  "N 1M" = "#fb6a4a", 
  "N 3M" = "#cb181d",
  "N 7M" = "#67001F",
  "_**<span style = 'color:#8c510a;'>Vaginal</span>**_"  = "transparent",
  "V -1W" = "#dfc27d", 
  "V 1M" = "#bf812d", 
  "V 3M" = "#8c510a",
  "V 7M" = "#543005",
  "_**<span style = 'color:#238b45;'>Milk</span>**_"  = "transparent",
  "M -1W" = "#bae4b3", 
  "M 1M" = "#74c476", 
  "M 3M" = "#238b45", 
  "M 7M" = "#00441B"
)
site_time_palette_simple <- site_time_palette[-c(1,6,11,16)]
index_palette <- c("minus" = "#67a9cf", 
                   "plus" = "#ef8a62")
site_time_design <- strip_nested(
  background_x = elem_list_rect(
    fill = c(
      ## Time
      rep("gray", 4), 
      ## Site within time
      site_time_palette_simple[c(1, 5, 9, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16)]
    )), 
  text_x = elem_list_text(
    color = c(
      ## Time
      rep("black", 4), 
      ## Site within time
      rep(c("black", "white"), times = c(11, 4))
    ), 
    face = rep("bold", 19))
)
site_time_design_wrap <- strip_themed(
  background_x = elem_list_rect(fill = site_time_palette_simple),
  text_x = elem_list_text(color = c(rep(c("black", "white"), times = c(3, 1)) |> rep(4))) 
)
```

```{r data modif-for-plots}
microcosm <- microcosm |> mutate(
  site_time = paste(site, time) |> fct(levels = names(site_time_palette))
)
asv_clust <- hclust(dist(t(compositions::clr(microcosm$Abundance))), method = "ward.D2")
asv_ordering <- with(asv_clust, labels[order])
format_matrix <- function(data, value_name) {
  data |> 
    `dimnames<-`(dimnames(microcosm$Abundance)) |> 
    as_tibble(rownames = "sample") |> 
    pivot_longer(-sample, names_to = "ASV", values_to = value_name, names_ptypes = factor(levels = asv_ordering))
}
```

```{r}
fitted_pln <- format_matrix(PLN_site_time$fitted, "fitted_PLN")
fitted_zipln <- format_matrix(ZI_PLN_site_time$fitted, "fitted_ZIPLN")
latent_pln <- format_matrix(PLN_site_time$latent, "latent_PLN")
latent_zipln <- format_matrix(ZI_PLN_site_time$latent, "latent_ZIPLN")
rho_zipln <- format_matrix(ZI_PLN_site_time$var_par$R, "R_ZIPLN")
observed <- format_matrix(microcosm$Abundance, "observed")
fitted_data <- inner_join(observed, fitted_pln, by = join_by(sample, ASV)) |> 
  inner_join(fitted_zipln, by = join_by(sample, ASV)) |> 
  inner_join(latent_pln, by = join_by(sample, ASV)) |> 
  inner_join(latent_zipln, by = join_by(sample, ASV)) |> 
  inner_join(rho_zipln, by = join_by(sample, ASV)) |> 
  inner_join(microcosm |> select(-Abundance), by = "sample") |> 
  pivot_longer(ends_with("PLN"), names_to = c(".value", "method"), names_pattern = "(.*)_(.*)")
```

## Figure 1

```{r fig.width=8, fig.height=2}
p1 <- fitted_data |>
  ggplot(aes(x = observed, y = fitted)) + 
  geom_point(alpha = 0.1) + geom_abline(slope = 1, intercept = 0, color = "grey") + 
  scale_x_log10(breaks = c(1, 100, 10000)) + scale_y_log10() + 
  labs(x = "Observed count", y = "Fitted value") + 
  facet_wrap2(~method, 
              strip = strip_themed(
                background_x = elem_list_rect(fill = c("#440154FF", "#FDE725FF")),
                text_x = elem_list_text(color = c("white", "black"), face = rep("bold", 2)),
                )) +
  ggpubr::theme_pubclean() +
  theme()
p2 <- fitted_data |> filter(observed == 0) |> 
  ggplot(aes(x = method |> fct_rev(), y = fitted)) + 
  geom_violin(aes(fill = method)) + 
  scale_y_log10() + scale_fill_viridis_d(guide = "none") +
  coord_flip() +
  ggpubr::theme_pubclean() + 
  labs(x = NULL, y = "Fitted value (null counts)")
p3 <- fitted_data |> 
  mutate(mean_abundance = mean(observed/Offset), .by = c(method, ASV)) |> 
  filter(observed == 0, method == "ZIPLN") |> 
  ggplot(aes(y = R, x = latent)) + 
  # scale_color_viridis_c(trans = "log10") +
  geom_point(alpha = 0.1) + 
  labs(x = "Latent mean (M)", y = "Zero inflation (P)") +
  ggpubr::theme_pubclean()
```

```{r fig.width=8, fig.height=2}
p1 + p2 + p3 + plot_layout(widths = c(0.42, 0.28, 0.30))
```

## Figure 2

```{r fig.height=5, fig.width=10}
p_heatmap <- fitted_data |> filter(method == "ZIPLN") |> 
  ggplot(aes(x = sample, y = ASV, fill = latent)) + 
  geom_tile() + 
  # scale_fill_distiller(type = "div", ) +
  scale_fill_viridis_c(option = "E", name = "Latent mean") + 
  facet_nested(~ time + site, scales = "free_x", space = "free_x", strip = site_time_design) + 
  theme(axis.text = element_blank(), axis.ticks = element_blank(), 
        panel.spacing.x = unit(0.1, "line")) +
  labs(x = "Samples", y = "ASV") + 
  NULL
  
p_heatmap_zi <- fitted_data |> filter(method == "ZIPLN") |> 
  ggplot(aes(x = sample, y = ASV, fill = R)) + 
  geom_tile() + 
  # scale_fill_distiller(type = "div", ) +
  scale_fill_viridis_c(option = "E", name = "P(Y = 0)", direction = -1) + 
  facet_nested(~ time + site, scales = "free_x", space = "free_x", strip = site_time_design) + 
  theme(axis.text = element_blank(), axis.ticks = element_blank(), 
        panel.spacing.x = unit(0.1, "line")) +
  labs(x = "Samples", y = "ASV") + 
  NULL
```


```{r fig.height=5, fig.width=10}
p <- (p_heatmap + p_heatmap_zi & theme(legend.position = "bottom"))
p
```

## Figure 3

```{r fig.width=10, fig.height=6}
pca_PLN_latent_means <- prcomp(PLN_site_time$latent) %>% 
  factoextra::fviz(axes = c(1,2), element = "ind", pointshape = 19, 
                   habillage = microcosm$site_time, title = "PCA of PLN latent means")
pca_ZIPLN_latent_means <- prcomp(ZI_PLN_site_time$latent) %>% 
  factoextra::fviz(axes = c(1,2), element = "ind", pointshape = 19, 
                   habillage = microcosm$site_time, title = "PCA of ZIPLN latent means")
p <- (pca_PLN_latent_means + pca_ZIPLN_latent_means & 
    scale_color_manual(values = site_time_palette, name = "Site x Time", drop = FALSE, 
                       guide = guide_legend(nrow = 2, byrow = TRUE)) &
    theme(legend.text = element_markdown(size = 10), 
          legend.title = element_markdown(size = 12), 
          legend.position = "bottom")) + 
  plot_layout(guides = "collect")
p
```


```{r}
fitted_data |> 
  pivot_wider(id_cols = sample:Offset,
              names_from = method, values_from = latent) |> 
  ggplot(aes(x = PLN, y = ZIPLN)) + 
  geom_point(aes(color = observed == 0), alpha = 0.1) + 
  geom_abline(slope = 1, intercept = 0, col = "red") + 
  scale_color_viridis_d(name = "Observed zero", 
                        guide = guide_legend(override.aes = list(alpha = 1))) + 
  labs(x = "PLN", y = "ZIPLN") +
  ggpubr::theme_pubclean() + 
  theme(legend.position = c(0, 1), legend.justification = c(0, 1),
        legend.background = element_rect(fill = "transparent"))
```
